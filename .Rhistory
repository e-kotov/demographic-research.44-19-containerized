# Ternary Balance Scheme Legend
#
# Plot a ternary balance scheme legend.
#
# @inheritParams ColorMap
#
# @examples
# ColorKey(h_ = 0, c_ = 140, l_ = 70, contrast = 0.5,
#          center = rep(1/3, 3))
ColorKey <- function (h_, c_, l_, contrast, center) {
# partition the ternary legend into k^2 equilateral sub-triangles
# calculate ternary vertex coordinates and fill color for each sub-triangle.
k = 100
C <- TernaryMeshCentroids(k)
V <- TernaryMeshVertices(C)
rgbs <- ColorMap(P = C[,-1], h_, c_, l_, contrast, center)[['hexsrgb']]
legend_surface <- data.frame(V, rgb = rep(rgbs, 3))
# plot the legend
legend <-
# basic legend
ggtern(
legend_surface,
aes_string(x = 'p1', y = 'p2', z = 'p3')
) +
geom_polygon(
aes_string(group = 'id', fill = 'rgb', color = 'rgb'),
lwd = 1
) +
geom_mask() +
# rgb color input
scale_color_identity(guide = FALSE) +
scale_fill_identity(guide = FALSE) +
# theme
theme_classic() +
theme(
tern.axis.title.L =
element_text(hjust = 0.2, vjust = 1, angle = -60),
tern.axis.title.R =
element_text(hjust = 0.8, vjust = 0.6, angle = 60)
)
return(legend)
}
# Centre of EU labor force composition --------------------------
cnst$eu_center <- Centre(euro_sectors[,2:4])
# Figure 1A ---------------------------------------------------------------
# Ternary diagram of regional education levels in Europe
# generate color key
plot_euro_education_key <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
lline(
Lintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
geom_point(
aes(x = ed_0to2, y = ed_3to4, z = ed_5to8),
shape = 21,
data = euro_education
) +
labs(
L = '% Lower secondary\nor less',
T = '% Upper secondary',
R = '% Tertiary',
title = 'A'
) +
theme_arrowlarge()
ggsave(
filename = 'euro_education_key.pdf',
path = cnst$fig_path,
plot = plot_euro_education_key,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 1B ---------------------------------------------------------------
# Ternary balance scheme map of regional education
# levels in Europe
# perform color coding
euro_education_colors <-
ColorMap(
as.matrix(euro_education[,2:4]),
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) %>%
mutate(
id = euro_education$id
)
euro_education_map <-
left_join(
euro_geo_nuts2,
euro_education_colors
)
plot_euro_education_map <-
euro_basemap +
geom_sf(
aes(
geometry = geometry,
fill = hexsrgb
),
color = NA,
data = euro_education_map
) +
scale_fill_identity() +
labs(title = 'B')
ggsave(
filename = 'euro_education_map.pdf',
path = cnst$fig_path,
plot = plot_euro_education_map,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 2A ---------------------------------------------------------------
# TBS map of regional labor force distribution in Europe
# perform color coding
euro_sectors_colors <-
ColorMap(
as.matrix(euro_sectors[,2:4]),
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) %>%
mutate(id = euro_sectors$id)
# generate color key
plot_euro_sectors_key <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
lline(
Lintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
lline(
Lintercept = cnst$eu_center[1],
size = cnst$grid_size*5,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$eu_center[2],
size = cnst$grid_size*5,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$eu_center[3],
size = cnst$grid_size*5,
color = cnst$grid_color
) +
geom_point(
aes(x = p1, y = p2, z = p3),
alpha = 0.2, size = 0.1,
data = euro_sectors_colors
) +
labs(
L = '% Primary', T = '% Secondary', R = '% Tertiary'
)
# join geographic data with color information
euro_sectors_map <-
left_join(
euro_geo_nuts2,
euro_sectors_colors
)
# generate choropleth map
plot_euro_sectors_map <-
euro_basemap +
geom_sf(
aes(
geometry = geometry,
fill = hexsrgb
),
color = NA,
data = euro_sectors_map
) +
scale_fill_identity() +
annotation_custom(
ggplotGrob(
plot_euro_sectors_key +
theme(plot.background = element_rect(fill = NA, color = NA))
),
xmin = 53e5, xmax = Inf, ymin = 35e5, ymax = Inf) +
labs(title = 'A')
#
ggsave(
filename = 'euro_sectors_map.pdf',
path = cnst$fig_path,
plot = plot_euro_sectors_map,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 2B ---------------------------------------------------------------
# Centered TBS map of regional labor force distribution in Europe
# transformed grid
gridlines_pct <-
TernaryGridCentered(
cnst$eu_center, N = 5, relative_grid = FALSE
)
# perform color coding
euro_sectors_colors_centered <-
ColorMap(
as.matrix(euro_sectors[,2:4]),
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$eu_center
) %>%
mutate(id = euro_sectors$id)
# generate color key
plot_euro_sectors_key_centered <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
geom_segment(
aes(
x = L_from, xend = L_to,
y = T_from, yend = T_to,
z = R_from, zend = R_to,
alpha = center
),
show.legend = FALSE,
data = gridlines_pct$centered_grid
) +
geom_point(
aes(x = cp1, y = cp2, z = cp3),
alpha = 0.2, size = 0.1,
data = euro_sectors_colors_centered
) +
scale_L_continuous(
breaks = gridlines_pct$centered_breaks$L,
labels = gridlines_pct$labels$L
) +
scale_T_continuous(
breaks = gridlines_pct$centered_breaks$T,
labels = gridlines_pct$labels$T
) +
scale_R_continuous(
breaks = gridlines_pct$centered_breaks$R,
labels = gridlines_pct$labels$R
) +
labs(
L = '% Primary', T = '% Secondary', R = '% Tertiary'
)
# join geographic data with color information
euro_sectors_map_centered <-
left_join(
euro_geo_nuts2,
euro_sectors_colors_centered
)
# generate choropleth map
plot_euro_sectors_map_centered <-
euro_basemap +
theme_void() +
geom_sf(
aes(
geometry = geometry,
fill = hexsrgb
),
color = NA,
data = euro_sectors_map_centered
) +
scale_fill_identity() +
annotation_custom(
ggplotGrob(
plot_euro_sectors_key_centered +
theme(plot.background = element_rect(fill = NA, color = NA))
),
xmin = 53e5, xmax = Inf, ymin = 35e5, ymax = Inf) +
labs(title = 'B')
ggsave(
filename = 'euro_sectors_map_centered.pdf',
path = cnst$fig_path,
plot = plot_euro_sectors_map_centered,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 3A ---------------------------------------------------------------
# Non centered legend
legend_style_a <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
# grid
lline(
Lintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
# center
lline(Lintercept = cnst$eu_center[1]) +
tline(Tintercept = cnst$eu_center[2]) +
rline(Rintercept = cnst$eu_center[3]) +
geom_point(
aes(x = p1, y = p2, z = p3),
alpha = 0.2, size = 1,
data = euro_sectors_colors
) +
labs(x = '% primary', y = '% secondary', z = '% ternary')
ggsave(
filename = 'legend_stylea.pdf',
path = cnst$fig_path, plot = legend_style_a,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 3B ---------------------------------------------------------------
# Transformed data on standard grid
legend_style_b <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
lline(
Lintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
geom_point(
aes(x = cp1, y = cp2, z = cp3),
alpha = 0.2, size = 1,
data = euro_sectors_colors_centered
) +
labs(x = '% yellow', y = '% cyan', z = '% magenta')
ggsave(
filename = 'legend_styleb.pdf',
path = cnst$fig_path, plot = legend_style_b,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 3C -----------------------------------------------------
# Transformed data on transformed gridlines
# transformed grid
gridlines_pct_diff <-
TernaryGridCentered(cnst$eu_center, N = 10)
legend_style_c <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$barycenter
) +
geom_segment(
aes(
x = L_from, xend = L_to,
y = T_from, yend = T_to,
z = R_from, zend = R_to,
alpha = center
),
show.legend = FALSE,
data = gridlines_pct_diff$centered_grid
) +
geom_point(aes(x = cp1, y = cp2, z = cp3),
alpha = 0.2, size = 1,
data = euro_sectors_colors_centered) +
scale_L_continuous(
breaks =
gridlines_pct_diff$centered_breaks$L,
labels =
paste0(formatC(gridlines_pct_diff$labels$L*100, format = 'd', flag = '+'),
' (', round(gridlines_pct_diff$non_centered_breaks$L*100, 0), ')')
) +
scale_T_continuous(
breaks =
gridlines_pct_diff$centered_breaks$T,
labels =
paste0(formatC(gridlines_pct_diff$labels$T*100, format = 'd', flag = '+'),
' (', round(gridlines_pct_diff$non_centered_breaks$T*100, 0), ')')
) +
scale_R_continuous(
breaks =
gridlines_pct_diff$centered_breaks$R,
labels =
paste0(formatC(gridlines_pct_diff$labels$R*100, format = 'd', flag = '+'),
' (', round(gridlines_pct_diff$non_centered_breaks$R*100, 0), ')')
) +
scale_alpha_manual(values = c(`FALSE` = 0.2, `TRUE` = 1)) +
labs(
x = '%pt. diff. primary (%)',
y = '%pt. diff. secondary (%)',
z = '%pt. diff. ternary (%)'
)
ggsave(
filename = 'legend_stylec.pdf',
path = cnst$fig_path, plot = legend_style_c,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 3D -----------------------------------------------------
legend_style_d <-
ColorKey(
h_ = cnst$hue, c_ = cnst$chroma, l_ = cnst$lightness,
contrast = cnst$contrast,
center = cnst$eu_center
) +
# grid
lline(
Lintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
tline(
Tintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
rline(
Rintercept = cnst$grid_intercept,
size = cnst$grid_size,
color = cnst$grid_color
) +
# center
lline(Lintercept = cnst$eu_center[1]) +
tline(Tintercept = cnst$eu_center[2]) +
rline(Rintercept = cnst$eu_center[3]) +
geom_point(aes(x = cp1, y = cp2, z = cp3),
alpha = 0.2, size = 1,
data = euro_sectors_colors) +
labs(x = '% primary', y = '% secondary', z = '% ternary')
ggsave(
filename = 'legend_styled.pdf',
path = cnst$fig_path, plot = legend_style_d,
width = cnst$fig_width, height = cnst$fig_height
)
# Figure 3E -----------------------------------------------------
euro_sectors_colors_alr_transformed <-
AlrTransform(
as.matrix(euro_sectors_colors_centered[,4:6])
)
colnames(euro_sectors_colors_alr_transformed) <- c('x', 'y')
euro_sectors_colors_centered <-
bind_cols(euro_sectors_colors_centered,
as.data.frame(euro_sectors_colors_alr_transformed))
legend_style_e <-
euro_sectors_colors_centered %>%
filter(is.finite(x)) %>%
ggplot() +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(
aes(x = x, y = y, fill = hexsrgb),
shape = 21, color = 'black',
size = 3
) +
scale_x_continuous(
expression(log(p[pri]/p[ter])-log(c[pri]/c[ter])),
breaks = scales::breaks_width(1)
) +
scale_y_continuous(
expression(log(p[sec]/p[ter])-log(c[sec]/c[ter])),
breaks = scales::breaks_width(1)
) +
scale_fill_identity() +
theme_minimal() +
theme(
panel.grid.minor =
element_blank(),
panel.grid.major =
element_line(color = 'black', size = 0.2)
) +
theme(
panel.background = element_rect(fill = 'grey30', color = NA)
) +
coord_equal(clip = 'off')
ggsave(
filename = 'legend_stylee.pdf',
path = cnst$fig_path, plot = legend_style_e,
width = cnst$fig_width, height = cnst$fig_height
)
renv::snapshot()
renv::status()
install.packages(c("cpp11", "progress", "RcppArmadillo"))
renv::status()
renv::snapshot()
renv::status()
